// This file is intentionally without code.
// It's present so that service worker registration will work when serving from the 'app' directory.
// The version of service-worker.js that's present in the 'dist' directory is automatically
// generated by the 'generate-service-worker' gulp task, and contains code to precache resources.
console.log("It  Worked more less ");
var dataCacheName = 'Italienisch_App-v1.01';
var cacheName = 'Italienisch_App-1.1';
var filesToCache = [
  '/',
  'JS/jquery-3.2.1.min.js',
  'index.html',
  'Vocabulary2.json',
  'JS/StartPage.js',
  'JS/main.js',
  'CSS/StartPage.css',
  'manifest.json',
  'images/icons/search.svg',
  'images/icons/close.svg',
  'JS/Admin.js',
  'StartPage/admin.php'
];

self.addEventListener('install', function(e) {
  //console.log('[ServiceWorker] Install');
  e.waitUntil(
    caches.open(cacheName).then(function(cache) {
      //console.log('[ServiceWorker] Caching app shell');
      return cache.addAll(filesToCache);
    })
  );
});

self.addEventListener('activate', function(e) {
  //console.log('[ServiceWorker] Activate');
  //console.log(caches);
  e.waitUntil(
    caches.keys().then(function(keyList) {
      return Promise.all(keyList.map(function(key) {
        if (key !== cacheName && key !== dataCacheName) {
          console.log('[ServiceWorker] Removing old cache', key);
          return caches.delete(key);
        }
      }));
    })
  );
  /*
   * Fixes a corner case in which the app wasn't returning the latest data.
   * You can reproduce the corner case by commenting out the line below and
   * then doing the following steps: 1) load app for first time so that the
   * initial New York City data is shown 2) press the refresh button on the
   * app 3) go offline 4) reload the app. You expect to see the newer NYC
   * data, but you actually see the initial data. This happens because the
   * service worker is not yet activated. The code below essentially lets
   * you activate the service worker faster.
   */
  return self.clients.claim();
});
var options = {
  ignoreMethod: true
};
self.addEventListener('fetch', function(e) {
  //console.log('Service Worker Fetch...');
  //console.log(caches);
  //console.log(e.request);
  e.respondWith(
    caches.match(e.request, options)
      .then(function(response) {
        if(e.request.url.indexOf('facebook') > -1){
          return fetch(e.request);
        }
        if(response){
          //console.log('Serve from cache', response);
          return response;
        }
      return fetch(e.request)
        .then(response =>
          caches.open(cacheName)
            .then((cache) => {
              try{
                cache.put(e.request, response.clone());
              }catch(err){
                console.error(err);
              }
            }));
    })
    .catch(function(error){
      console.error('Error on fetching');
      console.error(error);
    })
  );
  console.log(caches);
});

// self.addEventListener('fetch', function(event) {
//   event.respondWith(
//     fetch(event.request).catch(function() {
//       return caches.match(event.request);
//     })
//   );
// });
